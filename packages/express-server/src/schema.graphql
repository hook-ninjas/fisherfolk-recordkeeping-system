### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

enum CivilStatus {
  LegallySeparated
  Married
  Single
  Widowed
}

input CreateFisherfolkInput {
  age: Int!
  appellation: String!
  barangay: String!
  cityMunicipality: String!
  civilStatus: CivilStatus!
  contactNum: String!
  dateOfBirth: DateTime!
  educationalBackground: EducationalBackground!
  firstName: String!
  gender: Gender!
  lastName: String!
  middleName: String!
  nationality: String!
  numOfChildren: Int!
  personToNotify: String!
  placeOfBirth: String!
  province: String!
  ptnAddress: String!
  ptnContactNum: String!
  ptnRelationship: String!
  registrationDate: DateTime!
  religion: String!
  residentYear: Int!
  salutation: Salutation!
  status: FisherfolkStatus!
}

input CreateUserInput {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum EducationalBackground {
  College
  Elementary
  HighSchool
  PostGraduate
  Vocational
}

type Fisherfolk {
  age: Int!
  appellation: String!
  barangay: String!
  cityMunicipality: String!
  civilStatus: CivilStatus!
  contactNum: String!
  createdAt: DateTime!
  dateOfBirth: DateTime!
  educationalBackground: EducationalBackground!
  firstName: String!
  gender: Gender!
  id: BigInt!
  isArchive: Boolean!
  lastName: String!
  livelihoods: [Livelihood!]!
  middleName: String!
  nationality: String!
  numOfChildren: Int!
  organizations: [Organization]
  personToNotify: String!
  placeOfBirth: String!
  province: String!
  ptnAddress: String!
  ptnContactNum: String!
  ptnRelationship: String!
  registrationDate: DateTime!
  religion: String!
  residentYear: Int!
  salutation: Salutation!
  status: FisherfolkStatus!
  updatedAt: DateTime!
}

enum FisherfolkStatus {
  Active
  Deceased
  Inactive
}

enum Gender {
  Female
  Male
}

type Livelihood {
  createdAt: DateTime!
  description: String!
  fisherfolkId: BigInt!
  id: BigInt!
  isArchive: Boolean!
  isMain: Boolean!
  type: SourceOfIncome!
  updatedAt: DateTime!
}

type Mutation {
  createFisherfolk(data: CreateFisherfolkInput!): Fisherfolk!
  createUser(data: CreateUserInput!): User!
}

type Organization {
  createdAt: DateTime!
  fisherfolks: [Fisherfolk!]
  id: BigInt!
  name: String!
  position: String!
  updatedAt: DateTime!
  yearJoined: Int!
}

type Query {
  fisherfolks: [Fisherfolk!]!
}

enum Salutation {
  Mr
  Mrs
  Ms
}

enum SourceOfIncome {
  AquaCulture
  CaptureFishing
  FishProcessing
  FishVending
  Others
}

type User {
  id: Int!
  password: String!
  username: String!
}