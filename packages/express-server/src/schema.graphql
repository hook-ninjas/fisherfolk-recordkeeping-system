### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

enum CivilStatus {
  LegallySeparated
  Married
  Single
  Widowed
}

input CreateFisherfolkInput {
  age: Int!
  appellation: String!
  barangay: String!
  cityMunicipality: String!
  civilStatus: CivilStatus!
  contactNum: String!
  dateOfBirth: DateTime!
  educationalBackground: EducationalBackground!
  firstName: String!
  gender: Gender!
  lastName: String!
  livelihoods: [livelihoodInput!]!
  middleName: String!
  nationality: String!
  numOfChildren: Int!
  organization: OrganizationInput
  personToNotify: String!
  placeOfBirth: String!
  province: String!
  ptnAddress: String!
  ptnContactNum: String!
  ptnRelationship: String!
  religion: String!
  residentYear: Int!
  salutation: Salutation!
}

input CreateGearInput {
  classification: GearClassification!
  fisherfolkId: BigInt!
  photo: String
  type: String!
}

input CreateImageInput {
  fisherfolkId: BigInt
  gear_id: BigInt
  government_aid_id: Int
  name: String!
  text: String!
  updated_at: DateTime!
  url: String!
  vessel_id: BigInt
}

input CreateUserInput {
  password: String!
  username: String!
}

input CreateVesselInput {
  engineMake: String!
  fisherfolkId: BigInt!
  grossTonnage: Float
  homeport: String!
  horsepower: Float
  material: Material
  mfvrNumber: String!
  name: String!
  netTonnage: Float
  placeBuilt: String!
  registeredBreadth: Float
  registeredDepth: Float
  registeredLength: Float
  serialNumber: String!
  tonnageBreadth: Float
  tonnageDepth: Float
  tonnageLength: Float
  type: String!
  yearBuilt: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum EducationalBackground {
  College
  Elementary
  HighSchool
  PostGraduate
  Vocational
}

type Fisherfolk {
  age: Int!
  appellation: String!
  barangay: String!
  cityMunicipality: String!
  civilStatus: CivilStatus!
  contactNum: String!
  createdAt: DateTime!
  dateOfBirth: DateTime!
  educationalBackground: EducationalBackground!
  firstName: String!
  gears: [Gear!]!
  gender: Gender!
  governmentAid: [Queue!]!
  id: BigInt!
  images: [Image!]!
  isArchive: Boolean!
  lastName: String!
  livelihoods: [Livelihood!]!
  middleName: String!
  nationality: String!
  numOfChildren: Int!
  organizations: [Member!]!
  permit: Permit
  personToNotify: String!
  placeOfBirth: String!
  province: String!
  ptnAddress: String!
  ptnContactNum: String!
  ptnRelationship: String!
  registrationDate: DateTime!
  religion: String!
  residentYear: Int!
  salutation: Salutation!
  status: FisherfolkStatus!
  updatedAt: DateTime!
  vessels: [Vessel!]!
}

enum FisherfolkStatus {
  Active
  Deceased
  Inactive
}

type Gear {
  classification: GearClassification!
  createdAt: DateTime!
  fisherfolk: Fisherfolk!
  id: BigInt!
  type: String!
  updatedAt: DateTime!
}

enum GearClassification {
  FallingGear
  GillNets
  HookAndLine
  LiftNets
  Miscellaneous
  Others
  PotsAndTraps
  ScoopNets
  SeineNets
}

enum Gender {
  Female
  Male
}

type GovernmentAid {
  createdAt: DateTime!
  date: DateTime!
  description: String!
  id: Int!
  slot: Int!
  title: String!
  updatedAt: DateTime!
}

type Image {
  createdAt: DateTime!
  fisherfolk: Fisherfolk
  fisherfolkId: BigInt!
  id: String!
  isArchive: Boolean!
  name: String!
  updatedAt: DateTime!
  url: String!
}

type Livelihood {
  createdAt: DateTime!
  description: String!
  fisherfolk: Fisherfolk!
  fisherfolkId: BigInt!
  id: BigInt!
  isArchive: Boolean!
  isMain: Boolean!
  type: SourceOfIncome!
  updatedAt: DateTime!
}

enum Material {
  Composite
  Fiberglass
  Wood
}

type Member {
  createdAt: DateTime!
  fisherfolkId: BigInt!
  fisherfolks: Fisherfolk!
  organization: Organization!
  organizationId: Int!
  position: String!
  updatedAt: DateTime!
  yearJoined: Int!
}

type Mutation {
  createFisherfolk(data: CreateFisherfolkInput!): Fisherfolk!
  createGears(gears: [CreateGearInput!]!): [Gear!]!
  createImage(data: CreateImageInput!): Image!
  createUser(data: CreateUserInput!): AuthPayload!
  createVessel(vessel: CreateVesselInput!): Vessel!
  createVesselWithGear(gears: [CreateGearInput!]!, vessel: CreateVesselInput!): Vessel!
  loginUser(data: CreateUserInput!): AuthPayload!
  updateFisherfolk(data: UpdateFisherfolkInput!, fisherfolkId: Int!): Fisherfolk!
  updateFisherfolkImage(data: CreateImageInput!, id: String!, url: String!): Image!
  updateMfvr(id: Int!, mfvrNum: String!): Vessel!
}

type Organization {
  createdAt: DateTime!
  id: BigInt!
  members: [Member]
  name: String!
  updatedAt: DateTime!
}

input OrganizationInput {
  name: String!
  position: String!
  yearJoined: Int!
}

type Permit {
  certificateNumber: String!
  expired: Boolean!
  expiresOn: DateTime
  fisherfolk: Fisherfolk
  fisherfolkId: BigInt!
  gears: [Gear]
  registeredAt: DateTime!
  renewedAt: DateTime!
  vessels: [Vessel]
}

type Query {
  activeFisherFolk: Int!
  barangayCount: Int!
  fisherfolk(id: BigInt!): Fisherfolk!
  fisherfolkByRange(count: Int!, start: Int!): [Fisherfolk!]!
  fisherfolkGears(fisherfolkId: BigInt!): [Gear!]!
  fisherfolkGender(gender: Gender!): Int!
  fisherfolkPhoto(fisherfolkId: BigInt!): [Image!]!
  fisherfolkVessels(fisherfolkId: BigInt!): [Vessel!]!
  fisherfolks: [Fisherfolk!]!
  fisherfolksWithUniqueBarangay: [Fisherfolk!]!
  gears: [Gear!]!
  governmentAid(govtAidId: Int!): GovernmentAid!
  governmentAidPhotos(govtAidId: Int!): [Image!]!
  governmentAids: [GovernmentAid!]!
  livelihoodCount(activity: SourceOfIncome!): Int!
  totalFisherfolk: Int!
  totalFisherfolkGears(fisherfolkId: BigInt!): Int!
  totalFisherfolkVessels(fisherfolkId: BigInt!): Int!
  totalGears: Int!
  totalVessels: Int!
  user: User
  vessels: [Vessel!]!
}

type Queue {
  createdAt: DateTime!
  date: DateTime!
  fisherfolk: Fisherfolk!
  fisherfolkId: BigInt!
  governmentAid: GovernmentAid!
  governmentAidId: Int!
  queueNumber: Int!
  updatedAt: DateTime!
}

enum Salutation {
  Mr
  Mrs
  Ms
}

enum SourceOfIncome {
  Aquaculture
  CaptureFishing
  FishProcessing
  FishVending
  Others
}

input UpdateFisherfolkInput {
  age: Int!
  appellation: String!
  barangay: String!
  cityMunicipality: String!
  civilStatus: CivilStatus!
  contactNum: String!
  dateOfBirth: DateTime!
  educationalBackground: EducationalBackground!
  firstName: String!
  gender: Gender!
  lastName: String!
  livelihoods: [livelihoodInput!]!
  middleName: String!
  nationality: String!
  numOfChildren: Int!
  organizations: [OrganizationInput]!
  personToNotify: String!
  placeOfBirth: String!
  province: String!
  ptnAddress: String!
  ptnContactNum: String!
  ptnRelationship: String!
  religion: String!
  residentYear: Int!
  salutation: Salutation!
}

type User {
  id: Int!
  password: String!
  username: String!
}

type Vessel {
  createdAt: DateTime!
  engineMake: String!
  fisherfolk: Fisherfolk!
  grossTonnage: Float
  homeport: String!
  horsepower: Float
  id: BigInt!
  material: Material
  mfvrNumber: String!
  name: String!
  netTonnage: Float
  placeBuilt: String!
  registeredBreadth: Float
  registeredDepth: Float
  registeredLength: Float
  serialNumber: String!
  tonnageBreadth: Float
  tonnageDepth: Float
  tonnageLength: Float
  type: String!
  updatedAt: DateTime!
  yearBuilt: Int
}

input livelihoodInput {
  description: String!
  isMain: Boolean!
  type: SourceOfIncome!
}